import { NextRequest, NextResponse } from 'next/server'
import { crmMCP } from '@/lib/mcp-server'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/lib/auth'
import OpenAI from 'openai'

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
})

// Fun√ß√£o para executar comandos MCP baseados na requisi√ß√£o do Claude
async function executeMCPCommand(command: string, params: any, userId: string, companyId: string): Promise<any> {
  try {
    switch (command) {
      case 'get_properties':
        return await crmMCP.getProperties({ ...params, userId, companyId })
      
      case 'get_property_analytics':
        return await crmMCP.getPropertyAnalytics(params.propertyId, companyId)
      
      case 'get_contracts':
        return await crmMCP.getContracts({ ...params, userId, companyId })
      
      case 'get_payments':
        // Converter status "overdue" para par√¢metro overdue: true
        const paymentParams = { ...params, userId, companyId }
        if (params.status === 'overdue') {
          paymentParams.overdue = true
          delete paymentParams.status
        }
        return await crmMCP.getPayments(paymentParams)
      
      case 'get_financial_summary':
        return await crmMCP.getFinancialSummary(userId, companyId, params.month, params.year)
      
      case 'get_leads':
        return await crmMCP.getLeads({ ...params, userId, companyId })
      
      case 'find_property_matches':
        return await crmMCP.findPropertyMatches(params.leadId, companyId)
      
      case 'get_market_analysis':
        return await crmMCP.getMarketAnalysis(params.location, params.propertyType, companyId)
      
      case 'get_hot_leads':
        return await crmMCP.getHotLeads(userId, companyId)
      
      case 'get_sales_arguments':
        return await crmMCP.getSalesArguments(params.leadId, params.propertyId, companyId)
      
      case 'get_daily_sales_opportunities':
        return await crmMCP.getDailySalesOpportunities(userId, companyId)
      
      default:
        return { success: false, error: `Comando MCP n√£o reconhecido: ${command}` }
    }
  } catch (error) {
    return { success: false, error: `Erro ao executar comando MCP: ${error}` }
  }
}

// Sistema de prompt restritivo para SOFIA - CRM Imobili√°rio
const SYSTEM_PROMPT = `Voc√™ √© SOFIA, assistente especializada EXCLUSIVAMENTE em CRM imobili√°rio. Voc√™ APENAS responde perguntas relacionadas aos dados das seguintes tabelas do CRM:

üìä **DADOS DISPON√çVEIS NO CRM:**
- **Propriedades**: im√≥veis, portf√≥lio, disponibilidade, pre√ßos
- **Contratos**: loca√ß√µes, renova√ß√µes, vencimentos  
- **Pagamentos**: recebimentos, inadimpl√™ncia, boletos
- **Leads**: prospects, interessados em im√≥veis
- **Propriet√°rios**: donos dos im√≥veis
- **Inquilinos**: locat√°rios atuais
- **An√°lises Financeiras**: receitas, despesas, relat√≥rios

üö´ **RESTRI√á√ïES IMPORTANTES:**
1. **N√ÉO responda perguntas fora do contexto imobili√°rio/CRM**
2. **N√ÉO forne√ßa informa√ß√µes gerais, receitas, piadas, ou assuntos n√£o relacionados**
3. **SE n√£o houver dados suficientes nas tabelas, informe claramente**
4. **SEMPRE base suas respostas nos dados reais do sistema**

‚ö†Ô∏è **QUANDO N√ÉO H√Å DADOS SUFICIENTES, responda:**
"üè† **Dados Insuficientes** - Para fornecer uma an√°lise precisa sobre [t√≥pico], preciso que voc√™ cadastre mais dados no sistema:
‚Ä¢ Propriedades no m√≥dulo de Im√≥veis
‚Ä¢ Contratos no m√≥dulo de Contratos  
‚Ä¢ Leads na p√°gina de Leads
‚Ä¢ Pagamentos registrados

Cadastre essas informa√ß√µes primeiro para eu poder ajudar com insights valiosos! üìä"

‚ö†Ô∏è **PARA PERGUNTAS FORA DO CONTEXTO, responda:**
"ü§ñ Sou SOFIA, especialista em CRM imobili√°rio. S√≥ posso ajudar com:
‚Ä¢ üìä An√°lise de propriedades e portf√≥lio
‚Ä¢ üí∞ Controle de pagamentos e inadimpl√™ncia  
‚Ä¢ üéØ Gest√£o de leads e oportunidades
‚Ä¢ üìà Relat√≥rios financeiros imobili√°rios
‚Ä¢ üìã Contratos e renova√ß√µes

Para outras quest√µes, consulte outros recursos. Como posso ajudar com seu CRM imobili√°rio?"

COMANDOS MCP DISPON√çVEIS:
- get_properties, get_contracts, get_payments, get_leads
- get_financial_summary, get_hot_leads, find_property_matches
- get_property_analytics, get_market_analysis, get_sales_arguments

IMPORTANTE: Quando identificar necessidade de dados, responda APENAS com JSON:
{"action": "mcp_command", "command": "nome_comando", "params": {}}

Caso contr√°rio, analise os dados fornecidos ou informe sobre dados insuficientes.`

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)
    if (!session?.user?.id || !session?.user?.companyId) {
      return NextResponse.json({ error: 'N√£o autorizado ou sem empresa associada' }, { status: 401 })
    }

    const { message, context } = await request.json()

    if (!message) {
      return NextResponse.json({ error: 'Mensagem √© obrigat√≥ria' }, { status: 400 })
    }

    // Primeiro, enviar para GPT para identificar se precisa buscar dados
    const initialResponse = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      max_tokens: 1000,
      temperature: 0.1,
      messages: [
        {
          role: "system",
          content: SYSTEM_PROMPT
        },
        {
          role: "user",
          content: `Usu√°rio perguntou: "${message}"\n\nContexto anterior: ${context || 'Nenhum'}\n\nAn√°lise: O que voc√™ precisa saber para responder esta pergunta?`
        }
      ]
    })

    const gptResponse = initialResponse.choices[0]?.message?.content || ''

    // Verificar se GPT quer executar um comando MCP ou detectar inten√ß√£o
    let mcpResult = null
    try {
      // Limpar resposta GPT de markdown e espa√ßos
      const cleanResponse = gptResponse.replace(/```json\n?|\n?```/g, '').trim()
      const mcpRequest = JSON.parse(cleanResponse)
      if (mcpRequest.action === 'mcp_command') {
        mcpResult = await executeMCPCommand(
          mcpRequest.command, 
          mcpRequest.params, 
          session.user.id,
          session.user.companyId
        )
      }
    } catch (e) {
      // Se n√£o for JSON, usar detec√ß√£o inteligente
      const messageLC = message.toLowerCase()
      
      if (messageLC.includes('pagamento') && (messageLC.includes('atraso') || messageLC.includes('vencido') || messageLC.includes('pendente'))) {
        mcpResult = await executeMCPCommand('get_payments', { overdue: true }, session.user.id, session.user.companyId)
      } else if (messageLC.includes('lead') && messageLC.includes('match')) {
        mcpResult = await executeMCPCommand('get_leads', {}, session.user.id, session.user.companyId)
        // Depois processar matches se houver leads
      } else if (messageLC.includes('propriedade') || messageLC.includes('portf√≥lio') || messageLC.includes('im√≥v')) {
        mcpResult = await executeMCPCommand('get_properties', {}, session.user.id, session.user.companyId)
      } else if (messageLC.includes('contrato')) {
        mcpResult = await executeMCPCommand('get_contracts', {}, session.user.id, session.user.companyId)
      } else if (messageLC.includes('financeiro') || messageLC.includes('receita') || messageLC.includes('faturamento')) {
        const now = new Date()
        mcpResult = await executeMCPCommand('get_financial_summary', { 
          month: now.getMonth() + 1, 
          year: now.getFullYear() 
        }, session.user.id, session.user.companyId)
      } else if (messageLC.includes('leads quentes') || messageLC.includes('prioridade') || messageLC.includes('urgente')) {
        mcpResult = await executeMCPCommand('get_hot_leads', {}, session.user.id, session.user.companyId)
      } else if (messageLC.includes('oportunidade') || messageLC.includes('vendas hoje') || messageLC.includes('a√ß√µes do dia')) {
        mcpResult = await executeMCPCommand('get_daily_sales_opportunities', {}, session.user.id, session.user.companyId)
      } else if (messageLC.includes('argumento') || messageLC.includes('como convencer') || messageLC.includes('pitch')) {
        // Para argumentos de venda, precisaria de leadId e propertyId espec√≠ficos
        // Por enquanto, vamos buscar leads quentes como alternativa
        mcpResult = await executeMCPCommand('get_hot_leads', {}, session.user.id, session.user.companyId)
      }
    }

    // Se executou comando MCP, enviar dados para GPT para an√°lise final
    let finalResponse = gptResponse
    if (mcpResult) {
      // Verificar se h√° dados suficientes
      const hasData = mcpResult.data && 
        ((Array.isArray(mcpResult.data) && mcpResult.data.length > 0) ||
         (typeof mcpResult.data === 'object' && Object.keys(mcpResult.data).length > 0))

      if (!hasData) {
        // Resposta padr√£o quando n√£o h√° dados
        finalResponse = `üè† **Dados Insuficientes** - Para fornecer uma an√°lise precisa sobre sua consulta, preciso que voc√™ cadastre mais dados no sistema:

‚Ä¢ **Propriedades** no m√≥dulo de Im√≥veis
‚Ä¢ **Contratos** no m√≥dulo de Contratos  
‚Ä¢ **Leads** na p√°gina de Leads
‚Ä¢ **Pagamentos** registrados

Cadastre essas informa√ß√µes primeiro para eu poder ajudar com insights valiosos! üìä

üí° **Dica**: Comece cadastrando algumas propriedades e leads para ver an√°lises detalhadas.`
      } else {
        const analysisResponse = await openai.chat.completions.create({
          model: "gpt-4o-mini",
          max_tokens: 2000,
          temperature: 0.3,
          messages: [
            {
              role: "system",
              content: SYSTEM_PROMPT
            },
            {
              role: "user",
              content: `Pergunta do usu√°rio: "${message}"

Dados obtidos via MCP:
${JSON.stringify(mcpResult.data, null, 2)}

IMPORTANTE: Se os dados estiverem vazios ou insuficientes, informe que precisa de mais dados cadastrados no sistema. Caso contr√°rio, analise estes dados e forne√ßa uma resposta completa e √∫til. Inclua insights, tend√™ncias e sugest√µes de a√ß√£o quando apropriado.`
            }
          ]
        })

        finalResponse = analysisResponse.choices[0]?.message?.content || 'Erro ao processar resposta'
      }
    }

    return NextResponse.json({ 
      response: finalResponse,
      mcpData: mcpResult?.data || null,
      success: true
    })

  } catch (error) {
    console.error('Erro na API MCP Chat:', error)
    
    if (error instanceof Error && (error.message.includes('insufficient_quota') || error.message.includes('rate_limit'))) {
      return NextResponse.json({ 
        error: 'Cr√©ditos insuficientes na conta OpenAI ou limite de taxa excedido. Verifique sua conta.',
        type: 'credits'
      }, { status: 402 })
    }

    return NextResponse.json({ 
      error: 'Erro ao processar mensagem. Tente novamente.',
      details: error instanceof Error ? error.message : 'Erro desconhecido'
    }, { status: 500 })
  }
}
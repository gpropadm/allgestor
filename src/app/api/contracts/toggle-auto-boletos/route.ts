import { NextRequest, NextResponse } from 'next/server';
import { prisma } from '@/lib/db';

export async function POST(request: NextRequest) {
  try {
    const { contractId, autoGenerateBoletos, autoGenerateDay } = await request.json();

    if (!contractId) {
      return NextResponse.json(
        { error: 'ID do contrato é obrigatório' },
        { status: 400 }
      );
    }

    // Validar dia do mês (1-31)
    if (autoGenerateDay && (autoGenerateDay < 1 || autoGenerateDay > 31)) {
      return NextResponse.json(
        { error: 'Dia deve estar entre 1 e 31' },
        { status: 400 }
      );
    }

    // Verificar se o contrato existe
    const contract = await prisma.contract.findUnique({
      where: { id: contractId },
      include: {
        tenant: true,
        property: true,
      }
    });

    if (!contract) {
      return NextResponse.json(
        { error: 'Contrato não encontrado' },
        { status: 404 }
      );
    }

    // Atualizar configurações do contrato
    const updatedContract = await prisma.contract.update({
      where: { id: contractId },
      data: {
        autoGenerateBoletos: autoGenerateBoletos ?? contract.autoGenerateBoletos,
        autoGenerateDay: autoGenerateDay ?? contract.autoGenerateDay,
        updatedAt: new Date(),
      },
      include: {
        tenant: true,
        property: true,
      }
    });

    console.log(`✅ Configuração automática atualizada para contrato ${contractId}:`, {
      autoGenerateBoletos: updatedContract.autoGenerateBoletos,
      autoGenerateDay: updatedContract.autoGenerateDay,
      tenant: updatedContract.tenant.name,
      property: updatedContract.property.title,
    });

    return NextResponse.json({
      success: true,
      message: autoGenerateBoletos 
        ? `Geração automática ATIVADA - Todo dia ${autoGenerateDay || 10} do mês`
        : 'Geração automática DESATIVADA',
      contract: {
        id: updatedContract.id,
        autoGenerateBoletos: updatedContract.autoGenerateBoletos,
        autoGenerateDay: updatedContract.autoGenerateDay,
        tenant: updatedContract.tenant.name,
        property: updatedContract.property.title,
      }
    });

  } catch (error) {
    console.error('❌ Erro ao atualizar configuração automática:', error);
    return NextResponse.json(
      { error: 'Erro interno do servidor' },
      { status: 500 }
    );
  }
}
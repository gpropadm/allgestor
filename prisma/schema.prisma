generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  password      String
  phone         String?   // Telefone do usuário/corretor
  role          String    @default("USER")
  companyId     String?
  isActive      Boolean   @default(true)
  isBlocked     Boolean   @default(false)
  lastLogin     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  company       Company?  @relation(fields: [companyId], references: [id])
  properties    Property[]
  owners        Owner[]
  tenants       Tenant[]
  contracts     Contract[]
  leads         Lead[]
  partnershipsSent     PartnershipNotification[] @relation("PartnershipFrom")
  partnershipsReceived PartnershipNotification[] @relation("PartnershipTo")
  capturedLeads        CapturedLead[]
  marketAnalyses       MarketAnalysis[]
  scrapingJobs         ScrapingJob[]
  aiAssistants         AIAssistant[]
  aiConversations      AIConversation[]
  nfse                 NFSe[]

  @@map("users")
}

model Company {
  id            String    @id @default(cuid())
  name          String
  tradeName     String?
  document      String    @unique  // CNPJ
  email         String
  phone         String
  address       String
  city          String
  state         String
  zipCode       String
  logo          String?
  website       String?
  active        Boolean   @default(true)
  subscription  String    @default("BASIC") // BASIC, PREMIUM, ENTERPRISE
  
  // Configurações ASAAS para Split
  asaasApiKey   String?   // API Key principal da imobiliária no ASAAS
  asaasWalletId String?   // Wallet ID da imobiliária para receber comissões
  asaasEnabled  Boolean   @default(false) // Se o split está habilitado
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  users         User[]
  properties    Property[]
  owners        Owner[]
  tenants       Tenant[]
  contracts     Contract[]
  notifications Notification[]
  settings      Settings[]
  leads         Lead[]
  capturedLeads CapturedLead[]
  registryData  RegistryData[]
  iptuData      IPTUData[]
  marketAnalyses MarketAnalysis[]
  scrapingJobs  ScrapingJob[]
  followUpSequences FollowUpSequence[]
  salesStages   SalesStage[]
  aiAssistants  AIAssistant[]

  @@map("companies")
}

model Property {
  id           String         @id @default(cuid())
  title        String
  description  String?
  address      String
  city         String
  state        String
  zipCode      String
  propertyRegistration String? // Cadastro do imóvel para consulta IPTU
  bedrooms     Int
  bathrooms    Int
  area         Float
  rentPrice    Float
  salePrice    Float?
  propertyType PropertyType
  status       PropertyStatus @default(AVAILABLE)
  availableFor String         @default("[]") // JSON array: ["RENT"], ["SALE"], or ["RENT", "SALE"]
  ownerId      String
  companyId    String
  userId       String
  images       String         // JSON string for SQLite
  amenities    String         // JSON string for SQLite
  acceptsPartnership Boolean    @default(false) // Aceita parceria com outros usuários
  acceptsFinancing   Boolean    @default(false) // Aceita financiamento bancário
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  contracts     Contract[]
  notifications Notification[]
  leadNotifications LeadNotification[]
  matchedLeads  Lead[]
  maintenances  Maintenance[]
  monthlyReports MonthlyReport[]
  registryData  RegistryData[]
  iptuData      IPTUData[]
  owner         Owner          @relation(fields: [ownerId], references: [id])
  company       Company        @relation(fields: [companyId], references: [id])
  user          User           @relation(fields: [userId], references: [id])

  @@map("properties")
}

model Owner {
  id          String       @id @default(cuid())
  name        String
  email       String       
  phone       String
  document    String       
  address     String
  city        String
  state       String
  zipCode     String
  companyId   String?
  userId      String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  bankAccounts BankAccount[]
  properties  Property[]
  company     Company?     @relation(fields: [companyId], references: [id])
  user        User         @relation(fields: [userId], references: [id])

  @@unique([email, companyId])
  @@unique([document, companyId])
  @@map("owners")
}

model Tenant {
  id               String     @id @default(cuid())
  name             String
  email            String     
  phone            String
  document         String     
  address          String
  city             String
  state            String
  zipCode          String
  income           Float
  companyId        String
  userId           String
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  emergencyContact String?
  occupation       String?
  contracts        Contract[]
  notifications    Notification[]
  company          Company    @relation(fields: [companyId], references: [id])
  user             User       @relation(fields: [userId], references: [id])

  @@unique([email, companyId])
  @@unique([document, companyId])
  @@map("tenants")
}

model Contract {
  id                        String         @id @default(cuid())
  propertyId                String
  tenantId                  String
  companyId                 String
  userId                    String
  startDate                 DateTime
  endDate                   DateTime
  rentAmount                Float
  depositAmount             Float
  administrationFeePercentage Float        @default(10.0)
  iptuDeductible            Boolean        @default(true)
  condominiumDeductible     Boolean        @default(true)
  maintenanceDeductible     Boolean        @default(true)
  autoGenerateBoletos       Boolean        @default(false) // Gerar boletos automaticamente
  autoGenerateDay           Int?           @default(10)    // Dia do mês para gerar (1-31)
  status                    ContractStatus @default(ACTIVE)
  terms                     String?
  createdAt                 DateTime       @default(now())
  updatedAt                 DateTime       @updatedAt
  tenant        Tenant         @relation(fields: [tenantId], references: [id])
  property      Property       @relation(fields: [propertyId], references: [id])
  company       Company        @relation(fields: [companyId], references: [id])
  user          User           @relation(fields: [userId], references: [id])
  payments      Payment[]
  notifications Notification[]
  maintenances  Maintenance[]
  monthlyReports MonthlyReport[]

  @@map("contracts")
}

model Payment {
  id                String        @id @default(cuid())
  contractId        String
  amount            Float
  dueDate           DateTime
  paidDate          DateTime?
  status            PaymentStatus @default(PENDING)
  paymentMethod     String?       // BOLETO, PIX, DINHEIRO, TRANSFERENCIA, CARTAO
  boletoUrl         String?       // Existe no banco
  boletoCode        String?       // Existe no banco
  penalty           Float?
  interest          Float?
  receipts          String?       // JSON array of receipt image URLs
  notes             String?       // Additional payment notes
  
  // Campos para ASAAS Split
  asaasPaymentId    String?       // ID do pagamento no ASAAS
  asaasCustomerId   String?       // ID do cliente no ASAAS
  splitData         String?       // JSON com dados do split
  ownerAmount       Float?        // Valor para o proprietário
  companyAmount     Float?        // Valor para a imobiliária
  asaasFee          Float?        // Taxa do ASAAS
  splitStatus       String?       // Status do split: PENDING, DONE, FAILED
  pixQrCode         String?       // QR Code PIX do ASAAS
  
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  contract          Contract      @relation(fields: [contractId], references: [id])

  @@map("payments")
}

model BankAccount {
  id             String  @id @default(cuid())
  ownerId        String
  bankName       String
  bankCode       String
  accountType    String
  agency         String
  account        String
  accountDigit   String?
  pixKey         String?
  isDefault      Boolean @default(false)
  isActive       Boolean @default(true)
  
  // Dados para gateways
  asaasWalletId  String? // ID da carteira no Asaas
  pjbankAccountId String? // ID da conta no PJBank
  validated      Boolean @default(false) // Conta validada pelo gateway
  validatedAt    DateTime?
  
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  owner          Owner   @relation(fields: [ownerId], references: [id])

  @@map("bank_accounts")
}

model Alert {
  id        String    @id @default(cuid())
  type      AlertType
  message   String
  recipient String
  sent      Boolean   @default(false)
  sentAt    DateTime?
  createdAt DateTime  @default(now())

  @@map("alerts")
}

model Notification {
  id         String             @id @default(cuid())
  type       NotificationType
  priority   NotificationPriority @default(MEDIUM)
  title      String
  message    String
  recipient  String
  sent       Boolean            @default(false)
  sentAt     DateTime?
  tenantId   String?
  propertyId String?
  contractId String?
  companyId  String
  metadata   String?            // JSON string for additional data
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  
  tenant     Tenant?            @relation(fields: [tenantId], references: [id])
  property   Property?          @relation(fields: [propertyId], references: [id])
  contract   Contract?          @relation(fields: [contractId], references: [id])
  company    Company            @relation(fields: [companyId], references: [id])

  @@map("notifications")
}

enum Role {
  SUPER_ADMIN
  ADMIN
  USER
}

enum PropertyType {
  APARTMENT
  HOUSE
  COMMERCIAL
  LAND
  STUDIO
}

enum PropertyStatus {
  AVAILABLE
  RENTED
  SOLD
  MAINTENANCE
}

enum ContractStatus {
  ACTIVE
  EXPIRED
  CANCELLED
  RENEWED
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

// enum PaymentGateway {
//   ASAAS
//   PJBANK
//   MANUAL
// }

enum AlertType {
  PAYMENT_DUE
  PAYMENT_OVERDUE
  CONTRACT_EXPIRING
  MAINTENANCE_REQUEST
  GENERAL
}

enum NotificationType {
  PAYMENT_REMINDER
  PAYMENT_REMINDER_WHATSAPP
  PAYMENT_OVERDUE
  CONTRACT_EXPIRING
  DELINQUENCY_RISK
  MAINTENANCE_REQUEST
  GENERAL
}

enum NotificationPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum LeadInterest {
  RENT
  BUY
}

enum LeadStatus {
  ACTIVE
  CONVERTED
  INACTIVE
  ARCHIVED
}

enum LeadNotificationType {
  PROPERTY_MATCH
  PRICE_MATCH
  CRITERIA_UPDATE
}

enum MaintenanceType {
  PLUMBING
  ELECTRICAL
  PAINTING
  CLEANING
  APPLIANCE_REPAIR
  STRUCTURAL
  GARDEN
  SECURITY
  HVAC
  GENERAL
  OTHER
}

enum MaintenanceCategory {
  PREVENTIVE
  CORRECTIVE
  EMERGENCY
  IMPROVEMENT
}

enum MaintenanceStatus {
  PENDING
  APPROVED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  ON_HOLD
}

enum MaintenancePriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model Settings {
  id        String   @id @default(cuid())
  companyId String
  key       String
  value     String   // JSON string para flexibilidade
  category  String   // system, financial, notifications, etc
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  company   Company  @relation(fields: [companyId], references: [id])

  @@unique([companyId, key])
  @@map("settings")
}

model Lead {
  id                String       @id @default(cuid())
  name              String
  email             String
  phone             String
  document          String?
  interest          LeadInterest // RENT or BUY
  propertyType      PropertyType
  minPrice          Float?
  maxPrice          Float
  minBedrooms       Int?
  maxBedrooms       Int?
  minBathrooms      Int?
  maxBathrooms      Int?
  minArea           Float?
  maxArea           Float?
  preferredCities   String       // JSON array of cities
  preferredStates   String       // JSON array of states
  preferredLocation String?      // JSON with {lat, lng, radius, address} for preferred area
  locationRadius    Float?       // Radius in kilometers for location search
  amenities         String?      // JSON array of desired amenities
  notes             String?
  status            LeadStatus   @default(ACTIVE)
  companyId         String
  userId            String
  lastContactDate   DateTime?
  matchedPropertyId String?      // When a match is found
  needsFinancing    Boolean      @default(false) // Precisa de financiamento bancário
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  
  company           Company      @relation(fields: [companyId], references: [id])
  user              User         @relation(fields: [userId], references: [id])
  matchedProperty   Property?    @relation(fields: [matchedPropertyId], references: [id])
  notifications     LeadNotification[]

  @@map("leads")
}

model LeadNotification {
  id         String               @id @default(cuid())
  leadId     String
  propertyId String
  type       LeadNotificationType @default(PROPERTY_MATCH)
  title      String
  message    String
  sent       Boolean              @default(false)
  sentAt     DateTime?
  createdAt  DateTime             @default(now())
  
  lead       Lead                 @relation(fields: [leadId], references: [id])
  property   Property             @relation(fields: [propertyId], references: [id])

  @@map("lead_notifications")
}

model PartnershipNotification {
  id                String    @id @default(cuid())
  fromUserId        String    // Usuário que tem o lead
  toUserId          String    // Usuário que tem o imóvel (que aceita parceria)
  leadId            String
  propertyId        String
  fromUserName      String    // Nome do usuário que tem o lead
  fromUserPhone     String?   // Telefone do usuário que tem o lead
  fromUserEmail     String    // Email do usuário que tem o lead
  leadName          String    // Nome do lead/cliente
  leadPhone         String    // Telefone do lead/cliente
  propertyTitle     String    // Título do imóvel
  propertyPrice     Float     // Preço do imóvel
  matchType         String    // RENT ou BUY
  sent              Boolean   @default(false)
  sentAt            DateTime?
  viewed            Boolean   @default(false)
  viewedAt          DateTime?
  createdAt         DateTime  @default(now())
  
  fromUser          User      @relation("PartnershipFrom", fields: [fromUserId], references: [id])
  toUser            User      @relation("PartnershipTo", fields: [toUserId], references: [id])

  @@map("partnership_notifications")
}

model Maintenance {
  id               String            @id @default(cuid())
  contractId       String
  propertyId       String
  type             MaintenanceType
  category         MaintenanceCategory @default(CORRECTIVE)
  title            String
  description      String
  amount           Float
  supplier         String?
  supplierContact  String?
  scheduledDate    DateTime?
  completedDate    DateTime?
  status           MaintenanceStatus @default(PENDING)
  priority         MaintenancePriority @default(MEDIUM)
  images           String?           // JSON array of image URLs
  receipts         String?           // JSON array of receipt URLs
  notes            String?
  approvedBy       String?
  deductFromOwner  Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  
  contract         Contract          @relation(fields: [contractId], references: [id])
  property         Property          @relation(fields: [propertyId], references: [id])

  @@map("maintenances")
}

model MonthlyReport {
  id                    String    @id @default(cuid())
  contractId            String
  propertyId            String
  month                 Int       // 1-12
  year                  Int
  rentAmount            Float
  administrationFee     Float
  managementFee         Float
  maintenanceCosts      Float     @default(0)
  iptuCosts            Float     @default(0)
  condominiumCosts     Float     @default(0)
  otherDeductions      Float     @default(0)
  grossAmount          Float
  totalDeductions      Float
  netAmount            Float
  reportGenerated      Boolean   @default(false)
  reportSent           Boolean   @default(false)
  reportUrl            String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  
  contract             Contract  @relation(fields: [contractId], references: [id])
  property             Property  @relation(fields: [propertyId], references: [id])

  @@unique([contractId, month, year])
  @@map("monthly_reports")
}

model Expense {
  id          String   @id @default(cuid())
  description String
  amount      Float
  category    String
  date        DateTime
  year        Int
  month       Int
  type        String   @default("operational")
  receipt     String?
  notes       String?
  companyId   String?
  userId      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("expenses")
}

// AgentQL Tables
model CapturedLead {
  id          String   @id @default(cuid())
  source      String   // olx, zapimoveis, vivareal, etc
  title       String
  price       Float
  location    String
  description String?
  contact     String?
  link        String?
  images      String?  // JSON array
  status      String   @default("NEW") // NEW, CONTACTED, CONVERTED, IGNORED
  companyId   String
  userId      String?
  capturedAt  DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  company     Company  @relation(fields: [companyId], references: [id])
  user        User?    @relation(fields: [userId], references: [id])

  @@map("captured_leads")
}

model RegistryData {
  id               String    @id @default(cuid())
  registryNumber   String
  city             String
  ownerName        String?
  propertyAddress  String?
  area             String?
  registrationDate String?
  liens            String?   // JSON array of liens/gravames
  description      String?
  status           String    @default("ACTIVE") // ACTIVE, EXPIRED, INVALID
  propertyId       String?   // Link to existing property if found
  companyId        String
  extractedAt      DateTime  @default(now())
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  company          Company   @relation(fields: [companyId], references: [id])
  property         Property? @relation(fields: [propertyId], references: [id])

  @@unique([registryNumber, city])
  @@map("registry_data")
}

model IPTUData {
  id             String    @id @default(cuid())
  propertyCode   String
  city           String
  annualValue    Float?
  installments   String?   // JSON array
  dueDate        String?
  propertyValue  Float?
  area           String?
  status         String?
  propertyId     String?   // Link to existing property if found
  companyId      String
  extractedAt    DateTime  @default(now())
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  company        Company   @relation(fields: [companyId], references: [id])
  property       Property? @relation(fields: [propertyId], references: [id])

  @@unique([propertyCode, city])
  @@map("iptu_data")
}

model MarketAnalysis {
  id            String   @id @default(cuid())
  location      String
  propertyType  String
  priceRange    String   // JSON object {min, max}
  analysisDate  DateTime
  marketData    String   // JSON array of market data from different portals
  insights      String   // JSON array of generated insights
  averagePrice  Float?
  propertyCount Int?
  companyId     String
  userId        String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  company       Company  @relation(fields: [companyId], references: [id])
  user          User?    @relation(fields: [userId], references: [id])

  @@map("market_analysis")
}

model ScrapingJob {
  id          String   @id @default(cuid())
  type        String   // LEAD_CAPTURE, REGISTRY_EXTRACT, IPTU_EXTRACT, MARKET_MONITOR
  source      String   // olx, cartorio_sp, iptu_sp, etc
  parameters  String   // JSON object with job parameters
  status      String   @default("PENDING") // PENDING, RUNNING, COMPLETED, FAILED
  results     String?  // JSON object with results
  error       String?
  startedAt   DateTime?
  completedAt DateTime?
  companyId   String
  userId      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  company     Company  @relation(fields: [companyId], references: [id])
  user        User?    @relation(fields: [userId], references: [id])

  @@map("scraping_jobs")
}

// === SALES AUTOMATION MODELS ===

// 1. Follow-up Automático
model FollowUpSequence {
  id           String   @id @default(cuid())
  name         String
  description  String?
  triggerEvent String   // 'lead_created', 'visit_scheduled', etc
  active       Boolean  @default(true)
  companyId    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  company      Company         @relation(fields: [companyId], references: [id])
  steps        FollowUpStep[]
  
  @@map("follow_up_sequences")
}

model FollowUpStep {
  id              String   @id @default(cuid())
  sequenceId      String
  stepOrder       Int
  delayDays       Int
  delayHours      Int      @default(0)
  actionType      String   // 'email', 'whatsapp', 'call_reminder'
  templateSubject String?
  templateContent String?
  active          Boolean  @default(true)
  createdAt       DateTime @default(now())
  
  sequence        FollowUpSequence     @relation(fields: [sequenceId], references: [id])
  executions      FollowUpExecution[]
  
  @@map("follow_up_steps")
}

model FollowUpExecution {
  id           String    @id @default(cuid())
  leadId       String
  stepId       String
  scheduledFor DateTime
  executedAt   DateTime?
  status       String    @default("pending") // 'pending', 'executed', 'failed', 'cancelled'
  result       String?
  createdAt    DateTime  @default(now())
  
  step         FollowUpStep @relation(fields: [stepId], references: [id])
  
  @@map("follow_up_executions")
}

// 2. Lead Scoring
model LeadScore {
  id           String   @id @default(cuid())
  leadId       String
  scoreValue   Int
  factors      String   // JSON
  calculatedAt DateTime @default(now())
  validUntil   DateTime?
  
  @@map("lead_scores")
}

model LeadActivity {
  id           String   @id @default(cuid())
  leadId       String
  activityType String   // 'email_opened', 'whatsapp_replied', 'property_viewed'
  activityData String?  // JSON
  scoreImpact  Int      @default(0)
  createdAt    DateTime @default(now())
  
  @@map("lead_activities")
}

// 3. Pipeline Visual (Kanban)
model SalesStage {
  id          String   @id @default(cuid())
  name        String
  description String?
  stageOrder  Int
  color       String   @default("#3B82F6")
  companyId   String
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  
  company       Company            @relation(fields: [companyId], references: [id])
  opportunities SalesOpportunity[]
  
  @@map("sales_stages")
}

model SalesOpportunity {
  id                String    @id @default(cuid())
  leadId            String
  propertyId        String?
  stageId           String
  value             Float?
  probability       Int       @default(50) // 0-100%
  expectedCloseDate DateTime?
  notes             String?
  companyId         String
  userId            String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  stage             SalesStage @relation(fields: [stageId], references: [id])
  
  @@map("sales_opportunities")
}

// 4. WhatsApp Integration
model WhatsAppSession {
  id            String   @id @default(cuid())
  leadId        String
  phoneNumber   String
  sessionStatus String   @default("active") // 'active', 'expired', 'blocked'
  lastMessageAt DateTime?
  companyId     String
  createdAt     DateTime @default(now())
  
  messages      WhatsAppMessage[]
  
  @@map("whatsapp_sessions")
}

model WhatsAppMessage {
  id           String   @id @default(cuid())
  sessionId    String
  messageType  String   // 'text', 'image', 'document', 'template'
  content      String?
  direction    String   // 'sent', 'received'
  status       String   @default("sent") // 'sent', 'delivered', 'read', 'failed'
  templateName String?
  mediaUrl     String?
  createdAt    DateTime @default(now())
  
  session      WhatsAppSession @relation(fields: [sessionId], references: [id])
  
  @@map("whatsapp_messages")
}

// 5. Simulador Financeiro
model FinancingSimulation {
  id               String    @id @default(cuid())
  leadId           String
  propertyId       String
  propertyValue    Float
  downPayment      Float
  loanAmount       Float
  interestRate     Float
  loanTermMonths   Int
  monthlyPayment   Float
  totalInterest    Float
  bankName         String?
  approved         Boolean   @default(false)
  approvalDate     DateTime?
  createdAt        DateTime  @default(now())
  
  @@map("financing_simulations")
}

// 6. Tours Virtuais 360°
model VirtualTour {
  id           String   @id @default(cuid())
  propertyId   String
  tourName     String
  tourUrl      String?
  thumbnailUrl String?
  tourType     String   @default("360") // '360', 'video', 'interactive'
  viewCount    Int      @default(0)
  active       Boolean  @default(true)
  createdAt    DateTime @default(now())
  
  views        TourView[]
  
  @@map("virtual_tours")
}

model TourView {
  id           String   @id @default(cuid())
  tourId       String
  leadId       String?
  ipAddress    String?
  userAgent    String?
  viewDuration Int?     // em segundos
  completed    Boolean  @default(false)
  createdAt    DateTime @default(now())
  
  tour         VirtualTour @relation(fields: [tourId], references: [id])
  
  @@map("tour_views")
}

// 7. Análise Preditiva
model PredictionModel {
  id          String    @id @default(cuid())
  modelName   String
  modelType   String    // 'lead_conversion', 'price_prediction', 'time_to_close'
  modelData   String    // JSON - Parâmetros do modelo ML
  accuracy    Float?
  lastTrained DateTime?
  active      Boolean   @default(true)
  companyId   String?
  
  predictions Prediction[]
  
  @@map("prediction_models")
}

model Prediction {
  id              String   @id @default(cuid())
  modelId         String
  targetId        String   // lead_id ou property_id
  targetType      String   // 'lead', 'property'
  predictionValue Float?
  confidence      Float?
  factors         String?  // JSON
  createdAt       DateTime @default(now())
  
  model           PredictionModel @relation(fields: [modelId], references: [id])
  
  @@map("predictions")
}

// 8. Automação de Documentos
model DocumentTemplate {
  id              String   @id @default(cuid())
  name            String
  documentType    String   // 'contract', 'proposal', 'receipt'
  templateContent String   // HTML com placeholders
  variables       String   // JSON - Lista de variáveis disponíveis
  companyId       String
  active          Boolean  @default(true)
  createdAt       DateTime @default(now())
  
  generatedDocs   GeneratedDocument[]
  
  @@map("document_templates")
}

model GeneratedDocument {
  id             String   @id @default(cuid())
  templateId     String
  leadId         String?
  propertyId     String?
  documentUrl    String?
  documentStatus String   @default("draft") // 'draft', 'sent', 'signed', 'rejected'
  variablesUsed  String?  // JSON
  createdAt      DateTime @default(now())
  
  template       DocumentTemplate @relation(fields: [templateId], references: [id])
  
  @@map("generated_documents")
}

// 9. Geolocalização
model LocationData {
  id                String   @id @default(cuid())
  propertyId        String   @unique
  latitude          Float?
  longitude         Float?
  addressFormatted  String?
  neighborhood      String?
  nearbyPoints      String?  // JSON - Escolas, hospitais, etc
  walkabilityScore  Int?
  lastUpdated       DateTime @default(now())
  
  @@map("location_data")
}

// 10. Relatórios e Analytics
model ConversionMetric {
  id               String   @id @default(cuid())
  metricDate       DateTime
  companyId        String
  userId           String?
  source           String?  // 'website', 'facebook', 'google'
  leadsGenerated   Int      @default(0)
  leadsConverted   Int      @default(0)
  conversionRate   Float?
  averageDealValue Float?
  totalRevenue     Float?
  createdAt        DateTime @default(now())
  
  @@map("conversion_metrics")
}

// === AI ASSISTANTS SYSTEM ===

// Assistentes IA especializados por usuário/empresa
model AIAssistant {
  id               String   @id @default(cuid())
  userId           String
  companyId        String
  name             String   // SOFIA, CARLOS, MARIA, PEDRO, ALEX
  role             String   // Especialista em Vendas, CFO Virtual, etc
  personality      String?  // Persuasiva, focada em resultados
  speciality       String?  // Leads, pipeline, oportunidades
  systemPrompt     String   @db.Text
  contextFilePath  String?  // Caminho para arquivo .MD de contexto
  isActive         Boolean  @default(true)
  isPrimary        Boolean  @default(false) // Assistente principal
  avatarUrl        String?
  settings         String?  @db.Text // JSON com configurações específicas
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  user             User                @relation(fields: [userId], references: [id])
  company          Company             @relation(fields: [companyId], references: [id])
  conversations    AIConversation[]
  
  @@unique([userId, name]) // Um assistente por nome por usuário
  @@map("ai_assistants")
}

// Conversas com assistentes IA
model AIConversation {
  id           String   @id @default(cuid())
  userId       String
  assistantId  String
  title        String?
  contextData  String?  @db.Text // JSON com contexto preservado
  lastActivity DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  user         User         @relation(fields: [userId], references: [id])
  assistant    AIAssistant  @relation(fields: [assistantId], references: [id])
  messages     AIMessage[]
  
  @@map("ai_conversations")
}

// Mensagens das conversas com IA
model AIMessage {
  id             String   @id @default(cuid())
  conversationId String
  type           MessageType
  content        String   @db.Text
  mcpData        String?  @db.Text // JSON com dados MCP utilizados
  tokensUsed     Int?     @default(0)
  createdAt      DateTime @default(now())
  
  conversation   AIConversation @relation(fields: [conversationId], references: [id])
  
  @@map("ai_messages")
}

enum MessageType {
  USER
  ASSISTANT
}

model NFSe {
  id                 String   @id @default(cuid())
  userId             String
  numeroNota         String
  dataEmissao        DateTime
  competencia        DateTime
  valorServicos      Decimal  @db.Decimal(10,2)
  valorLiquido       Decimal  @db.Decimal(10,2)
  valorIss           Decimal  @db.Decimal(10,2) @default(0)
  valorPis           Decimal  @db.Decimal(10,2) @default(0)
  valorCofins        Decimal  @db.Decimal(10,2) @default(0)
  valorInss          Decimal  @db.Decimal(10,2) @default(0)
  valorIr            Decimal  @db.Decimal(10,2) @default(0)
  codigoServico      String?
  discriminacao      String?
  tomadorCnpjCpf     String?
  tomadorRazaoSocial String?
  tomadorEndereco    String?
  prestadorCnpjCpf   String?
  prestadorRazaoSocial String?
  fileName           String
  processed          Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  
  user               User     @relation(fields: [userId], references: [id])
  
  @@unique([numeroNota, userId])
  @@index([userId])
  @@index([competencia])
  @@map("nfse")
}



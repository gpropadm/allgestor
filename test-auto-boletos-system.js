#!/usr/bin/env node

/**
 * Script para testar o sistema de gera√ß√£o autom√°tica de boletos
 * Execute: node test-auto-boletos-system.js
 */

const fetch = require('node-fetch');
const BASE_URL = 'http://localhost:3000'; // Ajustar conforme necess√°rio

async function testAutoBoletosSystem() {
  console.log('üöÄ Testando Sistema de Gera√ß√£o Autom√°tica de Boletos\n');
  
  try {
    // 1. Primeiro vamos buscar os contratos existentes
    console.log('1Ô∏è‚É£ Buscando contratos existentes...');
    const contractsResponse = await fetch(`${BASE_URL}/api/contracts`);
    const contracts = await contractsResponse.json();
    
    if (!contracts || contracts.length === 0) {
      console.log('‚ùå Nenhum contrato encontrado. Crie um contrato primeiro.');
      return;
    }
    
    const firstContract = contracts[0];
    console.log(`‚úÖ Encontrado contrato: ${firstContract.id} - ${firstContract.tenant.name}`);
    console.log(`   Gera√ß√£o Autom√°tica: ${firstContract.autoGenerateBoletos ? 'ATIVA' : 'INATIVA'}`);
    
    // 2. Testar ativa√ß√£o da gera√ß√£o autom√°tica
    console.log('\n2Ô∏è‚É£ Testando ativa√ß√£o da gera√ß√£o autom√°tica...');
    const toggleResponse = await fetch(`${BASE_URL}/api/contracts/toggle-auto-boletos`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        contractId: firstContract.id,
        autoGenerateBoletos: true,
        autoGenerateDay: 10
      })
    });
    
    const toggleResult = await toggleResponse.json();
    
    if (toggleResult.success) {
      console.log(`‚úÖ ${toggleResult.message}`);
    } else {
      console.log(`‚ùå Erro ao ativar: ${toggleResult.error}`);
      return;
    }
    
    // 3. Testar execu√ß√£o manual do cron job
    console.log('\n3Ô∏è‚É£ Testando execu√ß√£o do cron job (simula√ß√£o)...');
    const cronResponse = await fetch(`${BASE_URL}/api/cron/auto-generate-boletos`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' }
    });
    
    const cronResult = await cronResponse.json();
    
    if (cronResult.success) {
      console.log(`‚úÖ ${cronResult.message}`);
      console.log('üìä Resumo:', cronResult.summary);
      
      if (cronResult.results && cronResult.results.length > 0) {
        console.log('\nüìã Detalhes dos contratos processados:');
        cronResult.results.forEach((result, index) => {
          console.log(`   ${index + 1}. ${result.tenant} - ${result.status}`);
          if (result.status === 'SUCCESS') {
            console.log(`      üí∞ Valor: R$ ${result.amount} - Vencimento: ${result.dueDate}`);
          } else if (result.reason) {
            console.log(`      ‚ö†Ô∏è Motivo: ${result.reason}`);
          }
        });
      }
    } else {
      console.log(`‚ùå Erro no cron job: ${cronResult.error}`);
      if (cronResult.details) {
        console.log(`   Detalhes: ${cronResult.details}`);
      }
    }
    
    // 4. Verificar se boletos foram criados
    console.log('\n4Ô∏è‚É£ Verificando boletos criados...');
    const updatedContractsResponse = await fetch(`${BASE_URL}/api/contracts`);
    const updatedContracts = await updatedContractsResponse.json();
    const updatedContract = updatedContracts.find(c => c.id === firstContract.id);
    
    if (updatedContract && updatedContract.payments) {
      console.log(`‚úÖ Contrato tem ${updatedContract.payments.length} pagamentos registrados`);
      
      const recentPayments = updatedContract.payments
        .filter(p => new Date(p.dueDate) > new Date())
        .sort((a, b) => new Date(a.dueDate) - new Date(b.dueDate));
      
      if (recentPayments.length > 0) {
        console.log('üí≥ Boletos futuros:');
        recentPayments.slice(0, 3).forEach((payment, index) => {
          console.log(`   ${index + 1}. R$ ${payment.amount} - Vencimento: ${new Date(payment.dueDate).toLocaleDateString('pt-BR')} - Status: ${payment.status}`);
        });
      }
    }
    
    console.log('\nüéâ Teste do sistema de gera√ß√£o autom√°tica conclu√≠do!');
    console.log('\nüìù Para uso em produ√ß√£o:');
    console.log('   ‚Ä¢ Configure um cron job para executar /api/cron/auto-generate-boletos diariamente');
    console.log('   ‚Ä¢ Recomendado: Todo dia 1¬∫ √†s 06:00 (0 6 1 * *)');
    console.log('   ‚Ä¢ Monitore os logs para acompanhar execu√ß√µes');
    
  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error.message);
    if (error.code === 'ECONNREFUSED') {
      console.log('üí° Dica: Certifique-se que o servidor est√° rodando em http://localhost:3000');
    }
  }
}

// Executar teste
if (require.main === module) {
  testAutoBoletosSystem();
}

module.exports = { testAutoBoletosSystem };
/**
 * Script para testar se os n√∫meros de contrato est√£o funcionando
 */

const { PrismaClient } = require('@prisma/client')
const prisma = new PrismaClient()

async function testContractNumbers() {
  try {
    console.log('üîç Testando n√∫meros de contrato...')
    
    // Verificar contratos existentes
    const contracts = await prisma.contract.findMany({
      select: {
        id: true,
        contractNumber: true,
        createdAt: true,
        userId: true
      },
      orderBy: {
        createdAt: 'desc'
      },
      take: 10
    })
    
    console.log(`üìã Total de contratos encontrados: ${contracts.length}`)
    
    contracts.forEach(contract => {
      console.log(`- ID: ${contract.id}`)
      console.log(`  N√∫mero: ${contract.contractNumber || 'NULL'}`)
      console.log(`  Data: ${contract.createdAt.toISOString()}`)
      console.log(`  User: ${contract.userId}`)
      console.log('---')
    })
    
    // Contar contratos com e sem n√∫mero
    const withNumber = contracts.filter(c => c.contractNumber).length
    const withoutNumber = contracts.filter(c => !c.contractNumber).length
    
    console.log(`‚úÖ Com n√∫mero: ${withNumber}`)
    console.log(`‚ùå Sem n√∫mero: ${withoutNumber}`)
    
    if (withoutNumber > 0) {
      console.log('\nüîÑ Executar migra√ß√£o:')
      console.log('node migrate-contract-number.js')
    }
    
  } catch (error) {
    console.error('‚ùå Erro:', error.message)
    
    if (error.message.includes('contractNumber')) {
      console.log('\n‚ö†Ô∏è  Campo contractNumber n√£o existe no banco.')
      console.log('Execute: npx prisma db push')
    }
    
  } finally {
    await prisma.$disconnect()
  }
}

testContractNumbers()